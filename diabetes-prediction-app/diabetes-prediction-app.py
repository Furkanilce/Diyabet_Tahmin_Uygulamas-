import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import streamlit as st
import joblib
import os
import matplotlib.pyplot as plt
import seaborn as sns


df = pd.read_csv("data/diabetes_data_upload.csv")

y = df["class"]
x = df.drop("class", axis = 1)


x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.7)



if os.path.exists("model/xgb_diabets_model.joblib") and os.path.exists("model/encoder.joblib") and os.path.exists("model/lencoder.joblib"):
    model = joblib.load("model/xgb_diabets_model.joblib")
    encoder = joblib.load("model/encoder.joblib")
    lencoder = joblib.load("model/lencoder.joblib")
    print("Model DosyasÄ±ndan YÃ¼klendi")
else:
    encoder = OneHotEncoder(handle_unknown="ignore")
    lencoder = LabelEncoder()

    encoder.fit(x_train)
    lencoder.fit(y_train)

    x_train_encoded = encoder.transform(x_train)
    y_train_encoded = lencoder.transform(y_train)

    xgb = XGBClassifier()
    model = xgb.fit(x_train_encoded, y_train_encoded)

    joblib.dump(encoder, "encoder.joblib")
    joblib.dump(lencoder, "lencoder.joblib")
    joblib.dump(model, "xgb_diabets_model.joblib")
    print("Model EÄŸitildi ve Kaydedildi")


x_test_encoded = encoder.transform(x_test)
y_test_encoded = lencoder.transform(y_test)


score = model.score(x_test_encoded, y_test_encoded)
y_pred = model.predict(x_test_encoded)
accuracy = accuracy_score(y_test_encoded, y_pred)
precision = precision_score(y_test_encoded, y_pred)
recall = recall_score(y_test_encoded, y_pred)
f1 = f1_score(y_test_encoded, y_pred)

print("Accuracy = {}".format(accuracy))
print("Precision = {}".format(precision))
print("Recall = {}".format(recall))
print("F1-score = {}".format(f1))
print("Skor = {}".format(score))


st.title("Diyabet Tahmin UygulamasÄ±")

secmeli_sayfa = st.sidebar.selectbox("Sayfa SeÃ§", ["Tahmin AracÄ±", "Veri Analizi"])

if secmeli_sayfa == "Tahmin AracÄ±":
    yas = st.number_input("YaÅŸÄ±nÄ±zÄ± Giriniz:", min_value = 0, max_value = 100, step = 1)
    cinsiyet = st.radio("Cinsiyet SeÃ§iniz:", ["KadÄ±n", "Erkek"])
    poliÃ¼ri = st.radio("PoliÃ¼ri var mÄ±?", ["Evet", "HayÄ±r"])
    polidipsi = st.radio("Polidipsi var mÄ±?", ["Evet", "HayÄ±r"])
    KiloKaybi = st.radio("Ani kilo kaybÄ± yaÅŸÄ±yor musunuz?", ["Evet","HayÄ±r"])
    zayÄ±flÄ±k = st.radio("ZayÄ±f mÄ±sÄ±nÄ±z?", ["Evet", "HayÄ±r"])
    polifaji = st.radio("Polifaji var mÄ±?", ["Evet", "HayÄ±r"])
    Genital = st.radio("Genital mantar enfeksionu var mÄ±?", ["Evet", "HayÄ±r"])
    gÃ¶rmeKaybÄ± = st.radio("GÃ¶rmek kaybÄ± var mÄ±?", ["Evet", "HayÄ±r"])
    kasÄ±ntÄ± = st.radio("KaÅŸÄ±ntÄ± var mÄ±?", ["Evet", "HayÄ±r"])
    sinirlilik = st.radio("Sinirlilik var mÄ±?", ["Evet", "HayÄ±r"])
    gecikmisiyilesme = st.radio("Beden iyileÅŸmede gecikem oluyor mu?", ["Evet", "HayÄ±r"])
    kismiParazit = st.radio("KÄ±smi Parazit var mÄ±?", ["Evet", "HayÄ±r"])
    kasSetligi = st.radio("Kas sertliÄŸi var mÄ±?", ["Evet", "HayÄ±r"])
    alopesi = st.radio("Alopsei var mÄ±?", ["Evet", "HayÄ±r"])
    obezite = st.radio("Obazite var mÄ±?", ["Evet", "HayÄ±r"])


    if st.button("GÃ¶nder"):
        data = []
        if yas >= 0 and yas <= 100:
            data.append(yas)
        else:
            st.write("DoÄŸru bir yaÅŸ giriniz.")

        if cinsiyet == "KadÄ±n":
            data.append("Female")
        else:
            data.append("Male")

        if poliÃ¼ri == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if polidipsi == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if KiloKaybi == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if zayÄ±flÄ±k == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if polifaji == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if Genital == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if gÃ¶rmeKaybÄ± == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if kasÄ±ntÄ± == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if sinirlilik == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if gecikmisiyilesme == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if kismiParazit == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if kasSetligi == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if alopesi == "Evet":
            data.append("Yes")
        else:
            data.append("No")

        if obezite == "Evet":
            data.append("Yes")
        else:
            data.append("No")


        data_df = pd.DataFrame([data], columns = x.columns)
        data_encoded = encoder.transform(data_df)
        prediction = model.predict(data_encoded)
        prediction_str = lencoder.inverse_transform(prediction)

        probs = model.predict_proba(data_encoded)
        max_proba = np.max(probs)

        st.write("SonuÃ§:")
        if prediction_str == "Positive":
            st.error(f"Diyabet riskiniz **yÃ¼ksek**. (%{max_proba * 100:.2f} olasÄ±lÄ±k)\n\nBir doktora gÃ¶rÃ¼nmenizi tavsiye ederiz.")

        else:
            st.success(f"Diyabet riskiniz **dÃ¼ÅŸÃ¼k**. (%{max_proba * 100:.2f} olasÄ±lÄ±k)")

elif secmeli_sayfa == "Veri Analizi":
    st.subheader("ğŸ“Š SÄ±nÄ±f ve Cinsiyet DaÄŸÄ±lÄ±mÄ±")

    fig, ax = plt.subplots()
    sns.countplot(data=df, x="class", hue="Gender", ax=ax)
    ax.set_title("Diyabet Durumunun Cinsiyete GÃ¶re DaÄŸÄ±lÄ±mÄ±")
    st.pyplot(fig)

